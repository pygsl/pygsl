# Target: test what is not standard at ubuntu latest and is known to
#         have not been fulfilled
# currently:
#  * swig 4.3, ubuntu contains 4.2, Swig_Python_AppendOutput changed functionality
#  * gsl  2.8: bspline changed functionality

name: test if pygsl is compatible with swig-4.3 and gsl-2.8



on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ACTIONS_RUNNER_DEBUG: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install dpkg-dev

      - name: Restore swig cache
        id: cache-swig-deb
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/swig4.3_arch.deb
          key: swig-4.3-${{ runner.os }}-${{ hashFiles('**/swig4.3_ubuntu_src.tar', 'compat/download-swig4.3.sh') }}
          restore-keys: |
            swig-4.3-${{ runner.os }}-

      - name: Download swig artifact
        uses: actions/download-artifact@v4
        with:
          name: swig-4.3
        continue-on-error: true

      - name: Check for swig artifact
        id: swig-check
        run: |
          if [ -f "${{ github.workspace }}/swig4.3_arch.deb" ]; then
            echo "Swig 4.3 artifact exists"
            echo "artifact_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Swig 4.3 artifact needs to be built"
            echo "artifact_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Display swig artifact (cache) status
        run: |
          echo "swig cache: ${{ steps.cache-swig-deb.outputs.cache-hit }}"
          echo "swig artifact: ${{ steps.swig-check.outputs.artifact_exists }}"

      - name: Download and extract swig-4.3 source
        if: ${{ steps.cache-swig-deb.outputs.cache-hit != 'true' && steps.swig-check.outputs.artifact_exists != 'true' }}
        run: |
          sh -x compat/download-swig4.3.sh
          mkdir -p build/src && tar -xvf swig4.3_ubuntu_src.tar -C build/src --strip-components=1

      - name: Build swig 4.3
        if: ${{ steps.cache-swig-deb.outputs.cache-hit != 'true' && steps.swig-check.outputs.artifact_exists != 'true' }}
        run: |
          cd build && dpkg-source -x src/swig*.dsc
          cd build/swig-4.3.0 && sudo apt-get build-dep . && dpkg-buildpackage -us -uc
          mv build/swig_4.3.0-0ubuntu2_amd64.deb ${{ github.workspace }}/swig4.3_arch.deb

      - name: Upload swig artifact
        uses: actions/upload-artifact@v4
        with:
          name: swig-4.3
          path: ${{ github.workspace }}/swig4.3_arch.deb


#      - name: Download and extract gsl-2.8 source
#        run: |
#          sh -x compat/download-gsl-2.8.sh
#          mkdir -p build/src && tar -xvf gsl_2.8_ubuntu_src.tar -C build/src --strip-components=1

#      - name: Cache built gsl-2.8
#        id: cache-gsl-deb
#        uses: actions/cache@v4
#        with:
#          path: |
#            ${{ github.workspace }}/libgsl-dev-2.8_arch.deb
#            ${{ github.workspace }}/libgslcblas0-2.8_arch.deb
#            ${{ github.workspace }}/libgsl_2.8_arch.deb
##          key: deb-gsl-${{ runner.os }}-v2.8-${{ hashFiles('**/gsl_2.8_ubuntu_src.tar', 'compat/download-gsl-2.8.sh') }}
#          key: deb-gsl-${{ runner.os }}-v2.8-${{ hashFiles('**/gsl_2.8_ubuntu_src.tar') }}
#          restore-keys: |
#            deb-gsl-${{ runner.os }}-v2.8-
#            deb-gsl-${{ runner.os }}-v2-
#            deb-gsl-${{ runner.os }}-
#
#      - name: Build gsl 2.8
#        if: steps.cache-gsl-deb.outputs.cache-hit != 'true'
#        run: |
#          echo "would build gsl"
#          (cd build && dpkg-source -x src/gsl*.dsc)
#          (cd build/gsl-2.8+dfsg/ && sudo apt-get build-dep . && dpkg-buildpackage -us -uc )
#          mv build/libgsl-dev_2.8+dfsg-3ubuntu3_amd64.deb ${{ github.workspace }}/libgsl-dev-2.8_arch.deb
#          mv build/libgslcblas0_2.8+dfsg-3ubuntu3_amd64.deb ${{ github.workspace }}/libgslcblas0-2.8_arch.deb
#          mv build/libgsl28_2.8+dfsg-3ubuntu3_amd64.deb  ${{ github.workspace }}/libgsl_2.8_arch.deb
#
#      - name: Upload gsl 2.8 artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: gsl-2.8
#          path: |
#            ${{ github.workspace }}/libgsl-dev-2.8_arch.deb
#            ${{ github.workspace }}/libgslcblas0-2.8_arch.deb
#            ${{ github.workspace }}/libgsl_2.8_arch.deb



  # test against swig4.3: at current state not part of ubuntu (swig4.0 standard)
  test-swig-additional:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download swig4.3 build artifact
        uses: actions/download-artifact@v4
        with:
          name: swig4.3

      - name: Install swig4.3
        run: |
          sudo dpkg -i swig4.3_arch.deb || sudo apt-get install -f -y

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libgsl-dev python3-dev python3-pip python3-venv

      - name: Build and test pygsl
        run: |
          python3 -m venv venv-test
          source venv-test/bin/activate
          python3 -m pip install --upgrade pip wheel pytest
          python3 -m pip install .
          (cd tests && python3 -m pytest .)

  # test against gsl-2.8, at current stage not part of ubuntu (2.7 standard)
  test-gsl-add:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download gsl 2.8 artifact
        uses: actions/download-artifact@v4
        with:
          name: gsl-2.8

# Let install step fail if it is not there
      - name: Install gsl-2.8
        run: |
          sudo dpkg -i libgsl-dev-2.8_arch.deb libgslcblas0-2.8_arch.deb libgsl_2.8_arch.deb  || sudo apt-get install -f -y

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install swig python3-dev python3-pip python3-venv

      - name: Build and test pygsl
        run: |
          python3 -m venv venv-test
          source venv-test/bin/activate
          python3 -m pip install --upgrade pip wheel pytest
          python3 -m pip install .
          (cd tests && python3 -m pytest .)
